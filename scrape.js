var fs = require('fs');
var readline = require('readline');
var moment = require('moment');
var google = require('googleapis');
var googleAuth = require('google-auth-library');
var $ = require('cheerio')
var request = require('request')

// If modifying these scopes, delete your previously saved credentials
// at ~/.credentials/calendar-nodejs-quickstart.json
var SCOPES = ['https://www.googleapis.com/auth/calendar'];
var TOKEN_DIR = (process.env.HOME || process.env.HOMEPATH ||
    process.env.USERPROFILE) + '/.credentials/';
var TOKEN_PATH = TOKEN_DIR + 'calendar-nodejs-quickstart.json';

// Load client secrets from a local file.
fs.readFile('client_secret.json', function processClientSecrets(err, content) {
  if (err) {
    console.log('Error loading client secret file: ' + err);
    return;
  }
  // Authorize a client with the loaded credentials, then call the
  // Google Calendar API.
  authorize(JSON.parse(content), scrape);
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 *
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  var clientSecret = credentials.installed.client_secret;
  var clientId = credentials.installed.client_id;
  var redirectUrl = credentials.installed.redirect_uris[0];
  var auth = new googleAuth();
  var oauth2Client = new auth.OAuth2(clientId, clientSecret, redirectUrl);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, function(err, token) {
    if (err) {
      getNewToken(oauth2Client, callback);
    } else {
      oauth2Client.credentials = JSON.parse(token);
      callback(oauth2Client);
    }
  });
}

function gotHTML(err, resp, html, auth) {
  // console.log("auth in gotHTML: ", auth); //debug!
  if (err) return console.error(err)
  var $html = $.load(html)
  // get all img tags and loop over them
  talks = []
  $html('a.lumen-tile__link').map(function(i, link) {
    var title = $(link).find('.lumen-tile__title').text().replace(/\s\s+/g, ' ').trim();
    var author = $(link).find('.lumen-tile__content').text().replace(/\s\s+/g, ' ').trim();
    if (author == 'Video Presentation' ||
      title.indexOf('Sustaining of Church Officers') > -1 ||
      title.indexOf('Statistical Report') > -1 ||
      title.indexOf('Auditing Department') > -1
    ) {
      return;
    }
    talks.push(title + ' - ' + author);
  })

  var startDate = '10/04/2016'; // date of this Conference
  var a = moment(startDate, 'DD/MM/YYYY');
  var b = moment('01/10/2016', 'DD/MM/YYYY'); // date of next Conference
  var weeks = b.diff(a, 'weeks');  

  var weeksWithTwoTalks = talks.length - weeks;

  talkIndex = 0;
  for (var weekCount = 0; weekCount <= weeks; weekCount++) {
    var talk = talks[talkIndex++];
    var c = moment(startDate, 'DD/MM/YYYY').add(weekCount, 'weeks').add(2, 'days').add(8, 'hours'); // Tuesday!
    saveTalk(talk, c.toISOString(), c.add(15, 'minutes').toISOString(), auth);

    if ((weeks - weekCount) < weeksWithTwoTalks) {
      var talk = talks[talkIndex++];
      if (typeof talk == 'undefined') {
        break;
      }
      var c = moment(startDate, 'DD/MM/YYYY').add(weekCount, 'weeks').add(4, 'days').add(8, 'hours'); // Thursday!
      saveTalk(talk, c.toISOString(), c.add(15, 'minutes').toISOString(), auth);
    }
  }
}

function saveTalk(talk, startDatetime, endDatetime, auth) {
  var calendar = google.calendar('v3');
  calendar.events.insert({
      auth: auth,
      calendarId: "primary",
      resource: {
          start: {
            dateTime: startDatetime,
            timeZone: "America/Denver"
          }, 
          end: {
            dateTime: endDatetime,
            timeZone: "America/Denver"
          }, 
          summary: talk,
          description: "#ldsconf autogenerated event"
      }
  }, function (err, success) {
      if (err) {
          console.log('Error adding %s at %s', talk, startDatetime);
          // console.log(err);
      } else {
          console.log('Successfully added %s at %s', talk, startDatetime);
          // console.log(success);
      }
  })

}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 *
 * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback to call with the authorized
 *     client.
 */
function getNewToken(oauth2Client, callback) {
  var authUrl = oauth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES
  });
  console.log('Authorize this app by visiting this url: ', authUrl);
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question('Enter the code from that page here: ', function(code) {
    rl.close();
    oauth2Client.getToken(code, function(err, token) {
      if (err) {
        console.log('Error while trying to retrieve access token', err);
        return;
      }
      oauth2Client.credentials = token;
      storeToken(token);
      callback(oauth2Client);
    });
  });
}

/**
 * Store token to disk be used in later program executions.
 *
 * @param {Object} token The token to store to disk.
 */
function storeToken(token) {
  try {
    fs.mkdirSync(TOKEN_DIR);
  } catch (err) {
    if (err.code != 'EEXIST') {
      throw err;
    }
  }
  fs.writeFile(TOKEN_PATH, JSON.stringify(token));
  console.log('Token stored to ' + TOKEN_PATH);
}

function scrape(auth) {
  request('https://www.lds.org/general-conference/2016/04?lang=eng', function(err, response, body) {
      gotHTML(err,response, body, auth);
  });
}

/**
 * Lists the next 10 events on the user's primary calendar.
 *
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */
function listEvents(auth) {
  var calendar = google.calendar('v3');
  // calendar.events.list({
  //   auth: auth,
  //   calendarId: 'primary',
  //   timeMin: (new Date()).toISOString(),
  //   maxResults: 10,
  //   singleEvents: true,
  //   orderBy: 'startTime'
  // }, function(err, response) {
  //   if (err) {
  //     console.log('The API returned an error: ' + err);
  //     return;
  //   }
  //   var events = response.items;
  //   if (events.length == 0) {
  //     console.log('No upcoming events found.');
  //   } else {
  //     console.log('Upcoming 10 events:');
  //     for (var i = 0; i < events.length; i++) {
  //       var event = events[i];
  //       var start = event.start.dateTime || event.start.date;
  //       console.log('%s - %s', start, event.summary);
  //     }
  //   }
  // });

  // calendar.events.insert({
  //     auth: auth,
  //     calendarId: "primary",
  //     resource: {
  //         start: {
  //           dateTime: "2016-04-17T18:25:00.000-07:00",
  //           timeZone: "America/Denver"
  //         }, 
  //         end: {
  //           dateTime: "2016-04-17T19:25:00.000-07:00",
  //           timeZone: "America/Denver"
  //         }, 
  //         summary: "#winning",
  //         // description: "winning @ life description"
  //     }
  // }, function (err, success) {
  //     if (err) {
  //         console.log(err);
  //     } else {
  //         console.log(success);
  //         // do something else
  //     }
  // })
  
}
